##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## IF COMPOSITE PRIMARY KEY : GENERATE A JAVA CLASS FOR THIS COMPOSITE KEY
#if ( $entity.hasCompositePrimaryKey() )
// This Bean has a composite Primary Key  
$generator.generate($target.entityName ,  "${entity.name}Id.java", $target.folder, "entity/entity_pk.vm"  )
#else 
// This Bean has a basic Primary Key (not composite) 
#end
##--- @Transient usage count ( number of xxxToMany links ) 
#set ( $TRANSIENT_COUNT = 0 )
#foreach( $link in $entity.selectedLinks )
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() )
#set ( $TRANSIENT_COUNT = $TRANSIENT_COUNT + 1 )
#end
#end
package ${target.javaPackageFromFolder($SRC)};

import java.io.Serializable;

import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

#foreach( $import in $entity.imports )
import $import;
#end
## ClÃ© primaire
#if ( $beanClass.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${beanClass.name}Id;
#set( $keyType = "${beanClass.name}Id" )
#set( $keyName = "id" )
#set( $keySetter = "setId" )
#set( $keyGetter = "getId" )
#else
#foreach( $field in $entity.keyAttributes )
#set( $keyType = "$field.wrapperType" )
#set( $keyName = "$field.formatedName(0)" )
#set( $keyField = $field )
#set( $keySetter = $field.setter )
#set( $keyGetter = $field.getter )
#end
#end

#foreach( $import in $entity.importsJpa )
import $import;
#end
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
#if (  $TRANSIENT_COUNT > 0 ) 
import javax.xml.bind.annotation.XmlTransient;
#end

/**
 * Persistent class for entity stored in table "${entity.databaseTable}"
 */
@XmlRootElement  // JAXB annotation for REST Web Services
@XmlAccessorType(XmlAccessType.PROPERTY) // JAXB accessor = getter/setter pair
$entity.jpaAnnotations
// Define named queries here
// @NamedQueries ( {
//  @NamedQuery ( name="${entity.name}.query1", query="SELECT x FROM ${entity.name} x WHERE  " ),
//  @NamedQuery ( name="${entity.name}.query2", query="SELECT x FROM ${entity.name} x WHERE  " )
// } )
public class $entity.name implements Serializable
{
    private static final long serialVersionUID = 1L;

#if ( $entity.hasCompositePrimaryKey() )
	@EmbeddedId
	@Valid
    private $keyType $keyName = new $keyType();

#else 
$keyField.jpaAnnotations(4)
$keyField.beanValidationAnnotationsJSR303(4)
    private $keyType $keyName#if($keyField.hasInitialValue()) = ${keyField.initialValue}#end;

#end
##-- ENTITY DATA FIELDS 
#foreach( $field in $dataFields )
$field.jpaAnnotations(4)
$field.beanValidationAnnotationsJSR303(4)
    private $field.wrapperType $field.formatedName(0) #if($field.hasInitialValue())= ${field.initialValue} #end;

#end
##-- ENTITY LINKS ( RELATIONSHIP )
## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
#if( !$link.isCardinalityManyToMany() && !$link.isCardinalityOneToMany() ) 
$link.jpaAnnotations(4)
    private $link.formatedType(0) $link.formatedName(0);

#end
#end    
##-- GETTER & SETTER FOR THE COMPOSITE KEY 
	public ${keyType} ${keyGetter}() {
        return ${keyName};
    }
 
    public void ${keySetter}(${keyType} ${keyName}) {
        this.${keyName} = ${keyName};
    }

##-- GETTERS & SETTERS FOR FIELDS
#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
#if ( $field.setter )    public void ${field.setter}( $field.wrapperType $field.name )
    {
        this.$field.name = $field.name;
    }

#end
#if ( $field.getter )    public $field.wrapperType ${field.getter}()
    {
        return this.$field.name;
    }

#end
## #end  
#end  
##-- GETTERS & SETTERS FOR LINKS
## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
#if( !$link.isCardinalityManyToMany() && !$link.isCardinalityOneToMany() ) 
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() ) 
    @XmlTransient
#end
#if ( $link.setter )    public void ${link.setter}( ${link.linkType} ${link.javaName} )
    {
        this.${link.javaName} = ${link.javaName};
    }

#end
#if ( $link.getter )    public ${link.linkType} ${link.getter}()
    {
        return this.${link.javaName};
    }

#end
#end
#end  
    public String toString()
    {
#set( $attributes = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_TEXT, $const.NOT_IN_SELECTED_LINKS ) )    
$entity.toStringMethodCodeLinesWithKey(8, $attributes, $keyName) 
## The "key" is used only if composite key
#foreach( $field in $entity.getAttributesByCriteria( $const.TEXT ) )
		// $field.name is not in toString because it's a "long text" field
#end  
    }

}
